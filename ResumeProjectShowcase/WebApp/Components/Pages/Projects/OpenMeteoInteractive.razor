@page "/OpenMeteoInteractive"
@inject IJSRuntime JSRuntime
@using ClassLibrary.Models.OpenMeteoService
@inject IOpenMeteoService OpenMeteoService

<PageTitle>Open Meteo Interactive Page - Under Construction</PageTitle>

<RadzenGoogleMap style="height: 400px"
                 Zoom="@_zoom"
                 ApiKey="AIzaSyAaAyWRr-uflaYNL6jytN_K1ubG-oeLdgk"
                 Center="@(new GoogleMapPosition() { Lat = _markerPosition.Latitude, Lng = _markerPosition.Longitude })"
                 MapClick="OnMapClick">
    <RadzenGoogleMapMarker Title="Selection" Label="Selected Area" Position="@(new GoogleMapPosition() { Lat = _markerPosition.Latitude, Lng = _markerPosition.Longitude })" />
</RadzenGoogleMap>

<RadzenFieldset Legend="Select Date Range">
    <RadzenDatePicker TValue="DateTime?" @bind-Value="_startDate" Placeholder="Start Date" />
    <RadzenDatePicker TValue="DateTime?" @bind-Value="_endDate" Placeholder="End Date" />
</RadzenFieldset>

@_mapClickedString

<RadzenButton Text="Get Weather Data" Click="GetWeatherData" />

@if (_weatherData != null)
{
    <RadzenCard>
        <h4>Weather Data</h4>
        <p>Latitude: @_weatherData.Latitude</p>
        <p>Longitude: @_weatherData.Longitude</p>
        <p>Timezone: @_weatherData.Timezone</p>
        <p>Timezone Abbreviation: @_weatherData.TimezoneAbbreviation</p>
        <p>UTC Offset Seconds: @_weatherData.UtcOffsetSeconds</p>
        <h5>Hourly Data</h5>
        <table class="table">
            <thead>
                <tr>
                    <th>Time</th>
                    <th>Temperature (°C)</th>
                    <th>Humidity (%)</th>
                    <th>Pressure (hPa)</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < _weatherData.HourlyWeatherDataLists.Time.Count; i++)
                {
                    <tr>
                        <td>@_weatherData.HourlyWeatherDataLists.Time[i]</td>
                        <td>@_weatherData.HourlyWeatherDataLists.Temperature2m[i]</td>
                        <td>@_weatherData.HourlyWeatherDataLists.RelativeHumidity2m[i]</td>
                        <td>@_weatherData.HourlyWeatherDataLists.SurfacePressure[i]</td>
                    </tr>
                }
            </tbody>
        </table>
    </RadzenCard>
}

@code {
    private LatLng _markerPosition = new() { Latitude = 43.258509, Longitude = -77.606445 };
    private DateTime? _startDate;
    private DateTime? _endDate;
    private WeatherData? _weatherData;
    private readonly int _zoom = 10;
    private string? _mapClickedString;

    private void OnMapClick(GoogleMapClickEventArgs args)
    {
        _markerPosition.Latitude = args.Position.Lat;
        _markerPosition.Longitude = args.Position.Lng;
        _mapClickedString = $"Map Clicked at Latitude: {args.Position.Lat}, Longitude: {args.Position.Lng}";
        StateHasChanged();
    }

    private async Task GetWeatherData()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            _weatherData = await OpenMeteoService.GetWeatherDataAsync(_markerPosition.Latitude, _markerPosition.Longitude, _startDate.Value.ToString("yyyy-MM-dd"), _endDate.Value.ToString("yyyy-MM-dd"));
            StateHasChanged();
        }
    }

    private class LatLng
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}