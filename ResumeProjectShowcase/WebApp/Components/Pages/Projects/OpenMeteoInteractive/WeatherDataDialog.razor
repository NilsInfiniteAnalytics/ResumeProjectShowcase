@page "/WeatherDataDialog"
@inject DialogService DialogService
@inject IOpenMeteoService OpenMeteoService

<RadzenFieldset AllowCollapse="true">
    <HeaderTemplate>
        <span>
            <RadzenIcon Icon="date_range" /><b>Date selection</b>
        </span>
    </HeaderTemplate>
    <ChildContent>
        <div class="date-selection">
            <RadzenLabel Text="Start Date" Component="startDatePicker" />
            <RadzenDatePicker TValue="DateTime?"
                              @bind-Value="_startDate" 
                              Placeholder="Select Start Date" 
                              DateFormat="MM/dd/yyyy"
                              Min="DateTime.Today.AddDays(-500)"
                              Max="DateTime.Today.AddDays(-1)"
                              ShowTime="false"/>
            <RadzenLabel Text="End Date" Component="endDatePicker" />
            <RadzenDatePicker TValue="DateTime?" 
                              @bind-Value="_endDate" 
                              Placeholder="Select End Date"
                              DateFormat="MM/dd/yyyy"
                              Min="DateTime.Today.AddDays(-500)"
                              Max="DateTime.Today.AddDays(-1)"
                              ShowTime="false"/>
        </div>
    </ChildContent>
</RadzenFieldset>

<RadzenFieldset>
    <HeaderTemplate>
        <span>
            <RadzenIcon Icon="assessment" /><b>Weather Data Plots</b>
        </span>
    </HeaderTemplate>
    <ChildContent>
        @if (_weatherData == null)
        {

            @if (_loading)
            {
                <div class="loading-indicator">
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary"
                                               Value="100"
                                               ShowValue="false"
                                               Mode="ProgressBarMode.Indeterminate" />
                    <p>Loading weather data...</p>
                </div>
            }
            else if (!_loading && _weatherData == null)
            {
                <p>Select date range and submit to view OpenMeteo data</p>
            }
        }
        else
        {
            <PlotlyPlotWeatherData WeatherChartData="GetWeatherChartData(_weatherData.HourlyWeatherDataLists.Temperature2m)"
                                   YAxisUnits="@_weatherData.HourlyWeatherDataUnits.Temperature2m"
                                   PlotName="Temperature" />
            <PlotlyPlotWeatherData WeatherChartData="GetWeatherChartData(_weatherData.HourlyWeatherDataLists.RelativeHumidity2m)"
                                   YAxisUnits="@_weatherData.HourlyWeatherDataUnits.RelativeHumidity2m"
                                   PlotName="Relative Humidity" />
            <PlotlyPlotWeatherData WeatherChartData="GetWeatherChartData(_weatherData.HourlyWeatherDataLists.SurfacePressure)"
                                   YAxisUnits="@_weatherData.HourlyWeatherDataUnits.SurfacePressure"
                                   PlotName="Surface Pressure" />

        }
    </ChildContent>
</RadzenFieldset>

<RadzenFieldset>
    <ChildContent>
        <RadzenButton Text="Submit" Click="Submit" />
        <RadzenButton Text="Cancel" Click="Cancel" />
    </ChildContent>
</RadzenFieldset>


@code {
    [Parameter]
    public required LatLng LatLng { get; set; }

    private DateTime? _startDate;
    private DateTime? _endDate;
    private WeatherData? _weatherData;
    private bool _loading;

    protected override void OnInitialized()
    {
        _startDate = DateTime.Now.Subtract(TimeSpan.FromDays(3));
        _endDate = DateTime.Now.Subtract(TimeSpan.FromDays(2));
        StateHasChanged();
    }

    private IEnumerable<WeatherChartData> GetWeatherChartData(List<double> values)
    {
        if (_weatherData == null) return new List<WeatherChartData>();
        var times = _weatherData.HourlyWeatherDataLists.Time;
        return times.Select((t, i) => new WeatherChartData { Time = t, Value = values[i] }).ToList();
    }

    private async Task Submit()
    {
        await GetWeatherData();
    }

    private async Task GetWeatherData()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            _loading = true;
            _weatherData = null!;
            var startDate = DateOnly.FromDateTime(_startDate.Value);
            var endDate = DateOnly.FromDateTime(_endDate.Value);
            var data = await OpenMeteoService.GetWeatherDataAsync(LatLng, startDate,  endDate);
            _weatherData = data ?? null!;
            _loading = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        DialogService.Close();
    }
}