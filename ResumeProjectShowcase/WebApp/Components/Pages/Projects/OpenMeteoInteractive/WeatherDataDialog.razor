@page "/WeatherDataDialog"
@inject IOpenMeteoService OpenMeteoService

<MudPaper Class="pa-4">
    <MudExpansionPanels>
        <!-- Date Selection Section -->
        <MudExpansionPanel Text="Date Selection" Expanded="true">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Date="_startDate"
                                   Label="Start Date"
                                   DateFormat="MM/dd/yyyy"
                                   MinDate="@DateTime.Today.AddDays(-500)"
                                   MaxDate="@DateTime.Today.AddDays(-1)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Date="_endDate"
                                   Label="End Date"
                                   DateFormat="MM/dd/yyyy"
                                   MinDate="@DateTime.Today.AddDays(-500)"
                                   MaxDate="@DateTime.Today.AddDays(-1)" />
                </MudItem>
            </MudGrid>
        </MudExpansionPanel>

        <!-- Weather Data Plots Section -->
        <MudExpansionPanel Text="Weather Data Plots">
            @if (_weatherData == null)
            {
                if (_loading)
                {
                    <div class="d-flex flex-column align-items-center">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        <MudText>Loading weather data...</MudText>
                    </div>
                }
                else
                {
                    <MudText>Select date range and submit to view OpenMeteo data</MudText>
                }
            }
            else
            {
                <PlotlyPlotWeatherData WeatherChartData="GetWeatherChartData(_weatherData)" LatLng="@LatLng" CityName="@CityName" />
            }
        </MudExpansionPanel>
    </MudExpansionPanels>

    <!-- Action Buttons -->
    <MudStack Row="true" Spacing="2" Justify="Justify.FlexEnd" Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="_loading">Submit</MudButton>
        <!--<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel" Disabled="_loading">Cancel</MudButton>-->
    </MudStack>
</MudPaper>


@code {
    [Parameter]
    public required LatLng LatLng { get; set; }
    [Parameter]
    public string CityName { get; set; }
    private DateTime? _startDate;
    private DateTime? _endDate;
    private WeatherData? _weatherData;
    private bool _loading;

    protected override void OnInitialized()
    {
        _startDate = DateTime.Now.Subtract(TimeSpan.FromDays(3));
        _endDate = DateTime.Now.Subtract(TimeSpan.FromDays(2));
        StateHasChanged();
    }

    private IEnumerable<WeatherChartData> GetWeatherChartData(WeatherData data)
    {
        var times = data.HourlyWeatherDataLists.Time;
        var temperatureData = data.HourlyWeatherDataLists.Temperature2m.Select((v, i) => new WeatherChartData { Time = times[i], Value = v, Type = "Temperature", Unit = data.HourlyWeatherDataUnits.Temperature2m }).ToList();
        var humidityData = data.HourlyWeatherDataLists.RelativeHumidity2m.Select((v, i) => new WeatherChartData { Time = times[i], Value = v, Type = "Relative Humidity", Unit = data.HourlyWeatherDataUnits.RelativeHumidity2m }).ToList();
        var pressureData = data.HourlyWeatherDataLists.SurfacePressure.Select((v, i) => new WeatherChartData { Time = times[i], Value = v, Type = "Surface Pressure", Unit = data.HourlyWeatherDataUnits.SurfacePressure }).ToList();

        return temperatureData.Concat(humidityData).Concat(pressureData);
    }

    private async Task Submit()
    {
        await GetWeatherData();
    }

    private async Task GetWeatherData()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            _loading = true;
            _weatherData = null!;
            var startDate = DateOnly.FromDateTime(_startDate.Value);
            var endDate = DateOnly.FromDateTime(_endDate.Value);
            try
            {
                var data = await OpenMeteoService.GetWeatherDataAsync(LatLng, startDate, endDate);
                _weatherData = data ?? null!;
                _loading = false;
            }
            catch (Exception ex)
            {
                _loading = false;
                _weatherData = null!;
                Console.WriteLine(ex.Message);
            }
            StateHasChanged();
        }
    }
}