@page "/WeatherDataDialog"
@inject DialogService DialogService
@inject IOpenMeteoService OpenMeteoService


<RadzenFieldset Legend="Select Date Range">
    <RadzenDatePicker TValue="DateTime?" @bind-Value="_startDate" Placeholder="Start Date" />
    <RadzenDatePicker TValue="DateTime?" @bind-Value="_endDate" Placeholder="End Date" />
</RadzenFieldset>

if (_weatherData != null)
{
}

<RadzenButton Text="Submit" Click="Submit" />
<RadzenButton Text="Cancel" Click="Cancel" />

@code {
    [Parameter]
    public required LatLng LatLng { get; set; }

    private DateTime? _startDate;
    private DateTime? _endDate;
    private WeatherData _weatherData = null!;

    private IEnumerable<WeatherChartData> GetWeatherChartData(List<double> values)
    {
        var times = _weatherData.HourlyWeatherDataLists.Time;
        return times.Select((t, i) => new WeatherChartData { Time = t, Value = values[i] }).ToList();
    }

    private async Task Submit()
    {
        await GetWeatherData();
    }

    private async Task GetWeatherData()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            var data = await OpenMeteoService.GetWeatherDataAsync(LatLng.Latitude, LatLng.Longitude, _startDate.Value.ToString("yyyy-MM-dd"), _endDate.Value.ToString("yyyy-MM-dd"));
            _weatherData = data ?? null!;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        DialogService.Close();
    }
}