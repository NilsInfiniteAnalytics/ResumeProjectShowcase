@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@inject IUnitsConverterService UnitsConverterService
@inject IHumidAirPropertiesService HumidAirPropertiesService

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
        Temperature Units
        <RadzenDropDown @bind-Value="@_selectedTemperatureUnits"
                        TextProperty="Text"
                        ValueProperty="Value"
                        Data="@(Enum.GetValues(typeof(TemperatureUnits)).Cast<TemperatureUnits>().Select(t => new { Text = $"{t}", Value = t }))"
                        Change="OnTemperatureUnitDropDownChange" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
        Surface Pressure Units
        <RadzenDropDown @bind-Value="@_selectedPressureUnits"
                        TextProperty="Text"
                        ValueProperty="Value"
                        Data="@(Enum.GetValues(typeof(PressureUnits)).Cast<PressureUnits>().Select(t => new { Text = $"{t}", Value = t }))"
                        Change="OnPressureUnitDropDownChange" />
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
        Perform Dry Air Equation of State Calculation
        <RadzenButton Text="Run"
                      Click="PerformDryAirEquationOfStateCalculation"
                      Icon="compare_arrows"
                      ButtonStyle="ButtonStyle.Primary"
                      class="rz-ripple" />
    </RadzenStack>
</RadzenStack>

<PlotlyChart @bind-Config="_weatherDataChartConfig"
             @bind-Layout="_weatherDataChartLayout"
             @bind-Data="_weatherDataTraces"
             @ref="_weatherDataChart"
             @key="_weatherDataChartKey"
             style="height: 30vh;" />

<PlotlyChart @bind-Config="_eosChartConfig"
             @bind-Layout="_eosChartLayout"
             @bind-Data="_eosTraces"
             @ref="_eosChart"
             @key="_eosChartKey"
             style="height: 30vh;" />


@code {
    [Parameter]
    public IEnumerable<WeatherChartData>? WeatherChartData { get; set; }
    [Parameter]
    public LatLng LatLng { get; set; }
    [Parameter]
    public string CityName { get; set; }

    PlotlyChart _weatherDataChart = new();
    PlotlyChart _eosChart = new();
    Config _weatherDataChartConfig = new();
    Layout _weatherDataChartLayout = new();
    Config _eosChartConfig = new();
    Layout _eosChartLayout = new();

    IList<ITrace> _weatherDataTraces = [];
    IList<object> _temperatures = [];
    IList<object> _relativeHumidities = [];
    IList<object> _surfacePressures = [];
    IList<object> _time = [];

    Dictionary<TemperatureUnits, string> _temperatureUnitMap = new()
    {
        { TemperatureUnits.Fahrenheit, "\u00b0F" },
        { TemperatureUnits.Celsius, "\u00b0C" },
        { TemperatureUnits.Kelvin, "K" }
    };
    TemperatureUnits _selectedTemperatureUnits;
    TemperatureUnits _oldSelectedUnits;
    enum TemperatureUnits
    {
        Fahrenheit,
        Celsius,
        Kelvin,
    }
    Dictionary<PressureUnits, string> _pressureUnitMap = new()
    {
        { PressureUnits.Pascal, "Pa" },
        { PressureUnits.Hectopascal, "hPa" },
        { PressureUnits.Megapascal, "MPa" }
    };
    PressureUnits _selectedPressureUnits;
    PressureUnits _oldSelectedPressureUnits;
    enum PressureUnits
    {
        Hectopascal,
        Pascal,
        Megapascal,
    }

    string _temperatureUnit = string.Empty;
    string _relativeHumidityUnit = string.Empty;
    string _surfacePressureUnit = string.Empty;
    private Guid _weatherDataChartKey = Guid.NewGuid();
    private Guid _eosChartKey = Guid.NewGuid();

    IList<ITrace> _eosTraces = [];
    IList<object> _molarAirDensities = [];
    IList<object> _molarEnthalpies = [];
    IList<object> _molarInternalEnergies = [];
    IList<object> _molarIsochoricSpecificHeats = [];
    IList<object> _molarIsobaricSpecificHeats = [];

    string _molarAirDensityUnit = "mol m-3";
    string _molarEnthalpyUnit = "J mol-1";
    string _molarInternalEnergyUnit = "J mol-1";
    string _molarIsochoricSpecificHeatUnit = "J mol-1 K-1";
    string _molarIsobaricSpecificHeatUnit = "J mol-1 K-1";

    protected override void OnInitialized()
    {
        if (WeatherChartData is null) return;

        _temperatures = processWeatherDataValueLists(WeatherChartData, "Temperature");
        _relativeHumidities = processWeatherDataValueLists(WeatherChartData, "Relative Humidity");
        _surfacePressures = processWeatherDataValueLists(WeatherChartData, "Surface Pressure");

        _temperatureUnit = WeatherChartData.FirstOrDefault(w => w.Type == "Temperature")?.Unit ?? string.Empty;
        _selectedTemperatureUnits = _temperatureUnitMap.FirstOrDefault(u => u.Value == _temperatureUnit).Key;
        _oldSelectedUnits = _selectedTemperatureUnits;
        _relativeHumidityUnit = WeatherChartData.FirstOrDefault(w => w.Type == "Relative Humidity")?.Unit ?? string.Empty;
        _surfacePressureUnit = WeatherChartData.FirstOrDefault(w => w.Type == "Surface Pressure")?.Unit ?? string.Empty;

        _time = WeatherChartData.Where(w => w.Type == "Temperature").Select(w => (object)w.Time!).ToList();

        DrawNewWeatherTraceData();
        StateHasChanged();
    }

    void DrawNewWeatherTraceData()
    {
        _weatherDataTraces.Clear();
        _weatherDataChartConfig = new Config { Responsive = true };
        _weatherDataChartLayout = new Layout
            {
                Title = new Title { Text = $"Weather Data for {CityName}, nearest to Lat={Math.Round(LatLng.Latitude, 2)},Long={Math.Round(LatLng.Longitude, 2)}" },
                YAxis = new[]
                                                {
                    new YAxis
                    {
                        Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Values" }
                    },
                    new YAxis
                    {
                        Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Values" },
                        Overlaying = "y",
                        Side = Plotly.Blazor.LayoutLib.YAxisLib.SideEnum.Right,
                    }
                },
                ShowLegend = true,
                Legend = [
                           new Legend {
                                X = 0,
                                Y = (decimal)-0.2,
                                Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.H,
                            }]
            };

        var temperatureTrace = new Scatter
            {
                Name = $"Temperature ({_temperatureUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _temperatures,
                YAxis = "y"
            };

        var humidityTrace = new Scatter
            {
                Name = $"Relative Humidity ({_relativeHumidityUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _relativeHumidities,
                YAxis = "y"
            };

        var pressureTrace = new Scatter
            {
                Name = $"Surface Pressure ({_surfacePressureUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _surfacePressures,
                YAxis = "y2"
            };

        _weatherDataTraces.Add(temperatureTrace);
        _weatherDataTraces.Add(humidityTrace);
        _weatherDataTraces.Add(pressureTrace);

        _weatherDataChartKey = Guid.NewGuid();
        StateHasChanged();
    }

    IList<object> processWeatherDataValueLists(IEnumerable<WeatherChartData> weatherData, string type)
    {
        return weatherData.Where(w => w.Type == type).Select(w => (object)w.Value).ToList();
    }

    void OnTemperatureUnitDropDownChange(object value)
    {
        if (value is TemperatureUnits units)
        {
            _selectedTemperatureUnits = units;
            _temperatureUnit = _temperatureUnitMap[_selectedTemperatureUnits];
            var temperaturesArray = _temperatures.Cast<double>().ToArray();
            var convertedTemperatures = UnitsConverterService.ConvertArray(temperaturesArray, _temperatureUnitMap[_oldSelectedUnits], _temperatureUnitMap[_selectedTemperatureUnits]);
            _temperatures = convertedTemperatures.Cast<object>().ToList();
            _oldSelectedUnits = _selectedTemperatureUnits;
            DrawNewWeatherTraceData();
        }
    }

    void OnPressureUnitDropDownChange(object value)
    {
        if (value is PressureUnits units)
        {
            _selectedPressureUnits = units;
            _surfacePressureUnit = _pressureUnitMap[_selectedPressureUnits];
            var pressuresArray = _surfacePressures.Cast<double>().ToArray();
            var convertedPressures = UnitsConverterService.ConvertArray(pressuresArray, _pressureUnitMap[_oldSelectedPressureUnits], _pressureUnitMap[_selectedPressureUnits]);
            _surfacePressures = convertedPressures.Cast<object>().ToList();
            _oldSelectedPressureUnits = _selectedPressureUnits;
            DrawNewWeatherTraceData();
        }
    }

    void PerformDryAirEquationOfStateCalculation()
    {
        var temperaturesArray = _temperatures.Cast<double>().ToArray();
        var convertedTemperatures = UnitsConverterService.ConvertArray(temperaturesArray, _temperatureUnitMap[_selectedTemperatureUnits], "K");
        var pressuresArray = _surfacePressures.Cast<double>().ToArray();
        var convertedPressures = UnitsConverterService.ConvertArray(pressuresArray, _pressureUnitMap[_selectedPressureUnits], "Pa");
        var molarAirDensities = HumidAirPropertiesService.CalculateDryAirMolarDensity(convertedTemperatures, convertedPressures);
        var molarEnthalpies = HumidAirPropertiesService.CalculateDryAirMolarEnthalpy(convertedTemperatures, convertedPressures);
        var molarInternalEnergies = HumidAirPropertiesService.CalculateDryAirMolarInternalEnergy(convertedTemperatures, convertedPressures);
        var molarIsochoricSpecificHeats = HumidAirPropertiesService.CalculateDryAirIsochoricSpecificHeat(convertedTemperatures, convertedPressures);
        var molarIsobaricSpecificHeats = HumidAirPropertiesService.CalculateDryAirIsobaricSpecificHeat(convertedTemperatures, convertedPressures);
        _molarAirDensities = molarAirDensities.Cast<object>().ToList();
        _molarEnthalpies = molarEnthalpies.Cast<object>().ToList();
        _molarInternalEnergies = molarInternalEnergies.Cast<object>().ToList();
        _molarIsochoricSpecificHeats = molarIsochoricSpecificHeats.Cast<object>().ToList();
        _molarIsobaricSpecificHeats = molarIsobaricSpecificHeats.Cast<object>().ToList();
        DrawNewEosTraceData();
    }

    void DrawNewEosTraceData()
    {
        _eosTraces.Clear();
        _eosChartConfig = new Config { Responsive = true };
        _eosChartLayout = new Layout
            {
                Title = new Title { Text = $"Dry Air Equation Of State [Lemmon, 2000]" },
                YAxis = new[]
                        {
                        new YAxis
                        {
                            Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Density, Specific Heats" }
                        },
                        new YAxis
                        {
                            Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Enthalpy, Internal Energy" },
                            Overlaying = "y",
                            Side = Plotly.Blazor.LayoutLib.YAxisLib.SideEnum.Right,
                        }
                    },
                ShowLegend = true,
                Legend = [
                                   new Legend {
                                X = 0,
                                Y = (decimal)-0.2,
                                Orientation = Plotly.Blazor.LayoutLib.LegendLib.OrientationEnum.H,
                            }]
            };

        var molarAirDensityTrace = new Scatter
            {
                Name = $"Dry Air Molar Density ({_molarAirDensityUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _molarAirDensities,
                YAxis = "y"
            };

        var molarEnthalpyTrace = new Scatter
            {
                Name = $"Dry Air Molar Enthalpy ({_molarEnthalpyUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _molarEnthalpies,
                YAxis = "y2"
            };

        var molarInternalEnergyTrace = new Scatter
            {
                Name = $"Dry Air Molar Internal Energy ({_molarInternalEnergyUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _molarInternalEnergies,
                YAxis = "y2"
            };

        var molarIsochoricSpecificHeatTrace = new Scatter
            {
                Name = $"Dry Air Molar Isochoric Specific Heat ({_molarIsochoricSpecificHeatUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _molarIsochoricSpecificHeats,
                YAxis = "y"
            };

        var molarIsobaricSpecificHeatTrace = new Scatter
            {
                Name = $"Dry Air Molar Isobaric Specific Heat ({_molarIsobaricSpecificHeatUnit})",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _time,
                Y = _molarIsobaricSpecificHeats,
                YAxis = "y"
            };

        _eosTraces.Add(molarAirDensityTrace);
        _eosTraces.Add(molarEnthalpyTrace);
        _eosTraces.Add(molarInternalEnergyTrace);
        _eosTraces.Add(molarIsochoricSpecificHeatTrace);
        _eosTraces.Add(molarIsobaricSpecificHeatTrace);

        _eosChartKey = Guid.NewGuid();
        StateHasChanged();
    }
}
