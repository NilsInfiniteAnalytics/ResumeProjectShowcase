@page "/OpenMeteoInteractive"
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IGeocodingService GeocodingService

<PageTitle>Open Meteo Interactive Page - Under Construction</PageTitle>

<RadzenPanel AllowCollapse="true">
    <HeaderTemplate>
        <span>
            <RadzenIcon Icon="change_history" /><b>How to use this page</b>
        </span>
    </HeaderTemplate>
    <ChildContent>
        <div class="instruction-panel">
            <ol>
                <li>Navigate using the map to find your desired location.</li>
                <li>Click on a location to move the marker to where you clicked.</li>
                <li>Click the marker to open a dialog for retrieval of weather data.</li>
                <li>Select the start and end dates for the weather data and click Submit.</li>
            </ol>
            This is a work in progress and will be updated with more features in the future!
        </div>
    </ChildContent>
</RadzenPanel>

<RadzenGoogleMap style="height: 100%"
                 Zoom="@_zoom"
                 ApiKey="AIzaSyAaAyWRr-uflaYNL6jytN_K1ubG-oeLdgk"
                 Center="@(new GoogleMapPosition() { Lat = _markerPosition.Latitude, Lng = _markerPosition.Longitude })"
                 MapClick="OnMapClick"
                 MarkerClick="OnMarkerClick">
    <Markers>
        <RadzenGoogleMapMarker Title="Selected Location"
                               Position="@(new GoogleMapPosition() { Lat = _markerPosition.Latitude, Lng = _markerPosition.Longitude })" />
    </Markers>
</RadzenGoogleMap>

<RadzenDialog />

@code {
    private readonly LatLng _markerPosition = new() { Latitude = 43.258509, Longitude = -77.606445 };
    private readonly int _zoom = 10;
    private string _nearestCity = "Unknown";

    private void OnMapClick(GoogleMapClickEventArgs args)
    {
        _markerPosition.Latitude = args.Position.Lat;
        _markerPosition.Longitude = args.Position.Lng;
        StateHasChanged();
    }

    private async Task OnMarkerClick()
    {
        try
        {
            _nearestCity = await GeocodingService.GetCityNameAsync(_markerPosition);
            await DialogService.OpenAsync<WeatherDataDialog>(
            "Request OpenMeteo Weather Data",
            new Dictionary<string, object>
                            {
                                { "LatLng", _markerPosition },
                                { "CityName", _nearestCity},
                            },
            new DialogOptions
                {
                    Width = "60vw",
                    Height = "70vh",
                    Resizable = true,
                    CloseDialogOnEsc = true
                });
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Duration = 4000,
                    SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Opened dialog!</RadzenText>,
            });
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 4000,
                    SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">Failed to open dialog!</RadzenText>,
                DetailContent = ns =>@<RadzenText>@e.Message</RadzenText>,
            });
        }
    }
}