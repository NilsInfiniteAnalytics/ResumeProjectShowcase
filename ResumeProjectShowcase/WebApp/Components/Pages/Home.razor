@page "/"
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<PageTitle>Home - Under Construction</PageTitle>

<div class="dropdown-container">
    <RadzenDropDown @bind-Value="_selectedGridDrawMethod"
                    Data="@_gridDrawMethods"
                    TextProperty="Value"
                    ValueProperty="Key"
                    Style="width: 200px"
                    Change="@UpdateGridMethod" />
</div>

<canvas id="gameCanvas"></canvas>
<div class="panel home" style="left: 18%; top: 9%;" @onclick="@NavigateToGitHub"></div>
<div class="panel about" style="left: 76%; top: 12%;"></div>
<div class="panel contact" style="left: 9%; top: 70%;"></div>
<div class="panel projects" style="left: 75%; top: 69%;"></div>

@code {
    int _selectedGridDrawMethod = (int)GridDrawMethods.GameOfLife;
    enum PanelType
    {
        Home,
        About,
        Contact,
        Projects
    }
    enum GridDrawMethods
    {
        GameOfLife,
        HeatEquation
    }
    Dictionary<int, string> _panelTypeToPath = new()
    {
        { (int)PanelType.Home, "/" },
        { (int)PanelType.About, "/About" },
        { (int)PanelType.Contact, "/Contact" },
        { (int)PanelType.Projects, "/Projects" }
    };
    readonly Dictionary<int, string> _gridDrawMethodToJavascriptMethod = new()
    {
        { (int)GridDrawMethods.GameOfLife, "gameOfLife" },
        { (int)GridDrawMethods.HeatEquation, "heatEquation" }
    };
    readonly List<KeyValuePair<int, string>> _gridDrawMethods = Enum.GetValues(typeof(GridDrawMethods))
        .Cast<GridDrawMethods>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initGameOfLife");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private void NavigateToGitHub() => NavigationManager.NavigateTo("https://github.com/NilsInfiniteAnalytics");
    private async Task UpdateGridMethod()
    {
        await JsRuntime.InvokeVoidAsync("init" + _gridDrawMethodToJavascriptMethod[_selectedGridDrawMethod]);
    }
}