@page "/"
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<PageTitle>Home - Under Construction</PageTitle>

<div class="dropdown-container">
    <RadzenDropDown @bind-Value="_selectedGridDrawMethod"
                    Data="@_gridDrawMethods"
                    TextProperty="Value"
                    ValueProperty="Key"
                    Style="width: 200px"
                    Disabled="true"
                    Change="@UpdateGridMethod" />
</div>

<canvas id="gameCanvas"></canvas>
<div class="panel home" style="left: 9%; top: 9%;"></div>
<div class="panel github" style="left: 37%; top: 5%;" @onclick="@NavigateToGitHub"></div>
<div class="panel gallery" style="left: 76%; top: 12%;" @onclick="() => NavigateToPanel(PanelType.Gallery)"></div>
<div class="panel contact" style="left: 9%; top: 70%;" @onclick="() => NavigateToPanel(PanelType.Contact)"></div>
<div class="panel projects" style="left: 75%; top: 69%;" @onclick="() => NavigateToPanel(PanelType.Projects)"></div>

@code {
    int _selectedGridDrawMethod = (int)GridDrawMethods.GameOfLife;

    enum PanelType
    {
        Home,
        Gallery,
        Contact,
        Projects
    }

    enum GridDrawMethods
    {
        GameOfLife,
        HeatEquation
    }

    readonly Dictionary<PanelType, string> _panelTypeToPath = new()
    {
        { PanelType.Home, "/" },
        { PanelType.Gallery, "/Gallery" },
        { PanelType.Contact, "/Resume" },
        { PanelType.Projects, "/ProjectsDirectory" }
    };

    readonly Dictionary<int, string> _gridDrawMethodToJavascriptMethod = new()
    {
        { (int)GridDrawMethods.GameOfLife, "initGameOfLife" },
        { (int)GridDrawMethods.HeatEquation, "initHeatEquationSolver" }
    };

    readonly List<KeyValuePair<int, string>> _gridDrawMethods = Enum.GetValues(typeof(GridDrawMethods))
        .Cast<GridDrawMethods>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initGameOfLife");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void NavigateToGitHub() => NavigationManager.NavigateTo("https://github.com/NilsInfiniteAnalytics");

    private void NavigateToPanel(PanelType panelType) => NavigationManager.NavigateTo(_panelTypeToPath[panelType]);

    private async Task UpdateGridMethod()
    {
        await JsRuntime.InvokeVoidAsync(_gridDrawMethodToJavascriptMethod[_selectedGridDrawMethod]);
    }
}