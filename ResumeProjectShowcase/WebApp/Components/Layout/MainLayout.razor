@using System.Reflection
@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime

<MudLayout>
    <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="1">
        <MudNavMenu>
            <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavLink Href="/ProjectsDirectory" Icon="@Icons.Material.Filled.Code">Projects</MudNavLink>
            <MudNavLink Href="/Resume" Icon="@Icons.Material.Filled.List">Resume</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@ToggleDrawer" Edge="Edge.Start" Color="Color.Inherit" />
            <MudText Class="ml-2">@_windowSize</MudText>
            <MudText Class="ml-2">@_currentTime.ToString("HH:mm:ss")</MudText>
            <MudText Class="ml-2">@WelcomeText</MudText>
            <MudSpacer />
            <MudText Class="mr-2">@_version</MudText>
        </MudAppBar>
        <div class="p-4">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter]
    public MudTheme Theme { get; set; }
    bool _drawerOpen;
    bool _sidebarExpanded;
    static string? _windowSize;
    bool _isDarkMode = true;
    Timer? _timer;
    static DateTime _currentTime = DateTime.Now;
    static string WelcomeText => $"{Greeting}, user!";
    static string Greeting => GetGreetingByTime();
    static string? _version;
    static int _clientTimezoneOffsetMinutes;

    [JSInvokable]
    public static Task SetTimezoneOffset(int minutes)
    {
        _clientTimezoneOffsetMinutes = minutes;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task UpdateWindowSize(string? size)
    {
        _windowSize = size;
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer(TimerCallback, null, 0, 1000);
        _sidebarExpanded = false;
        _version = GetVersion();
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _windowSize = await JsRuntime.InvokeAsync<string>("getWindowSize");
            await JsRuntime.InvokeVoidAsync("getClientTimezoneOffset");
            await JsRuntime.InvokeVoidAsync("triggerResize");
        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    static string GetGreetingByTime()
    {
        var hour = _currentTime.Hour;
        if (hour < 12) return "Good morning";
        if (hour < 17) return "Good afternoon";
        return "Good evening";
    }

    void TimerCallback(object? state)
    {
        var utcNow = DateTime.UtcNow;
        var localTime = utcNow.AddMinutes(-_clientTimezoneOffsetMinutes);
        _currentTime = localTime;
        InvokeAsync(StateHasChanged);
    }

    static string GetVersion()
    {
        var version = Assembly.GetExecutingAssembly().GetName().Version;
        return version != null ? $"Build Version {version}" : "Version not found";
    }

    void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }
}