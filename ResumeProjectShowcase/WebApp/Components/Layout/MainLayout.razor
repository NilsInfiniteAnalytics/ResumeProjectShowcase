@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime
@using ClassLibrary.Records

<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)" />
            <RadzenLabel Text="@_windowSize" Style="margin-right: 20px;" />
            <RadzenLabel Text="@_currentTime.ToString("HH:mm:ss")" Style="margin-right: 20px;" />
            <RadzenLabel Text="@WelcomeText" Style="margin-right: 20px;" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_sidebarExpanded" style="position: absolute; z-index: 3">
        <RadzenStack AlignItems="AlignItems.End" Class="rz-p-2">
            <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@(() => _sidebarExpanded = false)" />
        </RadzenStack>
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
            <RadzenPanelMenuItem Text="Projects" Icon="code" Path="/Projects" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        @Body
    </RadzenBody>
</RadzenLayout>

@code {
    bool _sidebarExpanded;

    static string? _windowSize;

    Timer? _timer;

    static DateTime _currentTime = DateTime.Now;

    string WelcomeText => $"{Greeting}, user!";

    static string Greeting => GetGreetingByTime();

    private static string GetGreetingByTime()
    {
        var hour = _currentTime.Hour;
        if (hour < 12) return "Good morning";
        if (hour < 17) return "Good afternoon";
        return "Good evening";
    }

    static int _clientTimezoneOffsetMinutes;

    [JSInvokable]
    public static Task SetTimezoneOffset(int minutes)
    {
        _clientTimezoneOffsetMinutes = minutes;
        return Task.CompletedTask;
    }

    [JSInvokable]
    public static Task UpdateWindowSize(string? size)
    {
        _windowSize = size;
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer(TimerCallback, null, 0, 1000);
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _windowSize = await JsRuntime.InvokeAsync<string>(JsFunctions.GetWindowSize);
            await JsRuntime.InvokeVoidAsync(JsFunctions.GetClientTimezoneOffset);
            await JsRuntime.InvokeVoidAsync(JsFunctions.TriggerResizeEvent);
        }
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    void TimerCallback(object? state)
    {
        var utcNow = DateTime.UtcNow;
        var localTime = utcNow.AddMinutes(-_clientTimezoneOffsetMinutes);
        _currentTime = localTime;
        InvokeAsync(StateHasChanged);
    }

}